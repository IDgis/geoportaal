// Add repositories and dependencies for the build script: gradle plugins.
buildscript {
	repositories {
		mavenCentral()
	}
	
	dependencies {
		classpath "com.github.houbie:lesscss-gradle-plugin:1.0.3-less-1.7.0"
		classpath "com.querydsl:querydsl-sql-codegen:4.0.6"
	}
}

apply plugin: 'java-base'
apply plugin: 'play'
apply plugin: 'eclipse'

repositories {
	jcenter ()
	mavenCentral ()
	
	ivy {
		name "typesafe-ivy-release"
		url "https://repo.typesafe.com/typesafe/ivy-releases"
		layout "ivy"
	}
	
	// Add IDgis repositories:
	maven {
		name "idgis-public"
		url "http://nexus.idgis.eu/content/groups/public/"
		credentials {
			username nexusUser 
			password nexusPassword
		}
	}
	maven {
		name "idgis-restricted"
		url "http://nexus.idgis.eu/content/groups/restricted/"
		credentials {
			username nexusUser 
			password nexusPassword
		}
	}	
}

configurations {
	databaseDriver
	queryDSLApt
}

dependencies {
	// Play default dependencies (Scala version 2.11):
	play "com.typesafe.play:play-java-jdbc_2.11:2.4.3"		// javaJdbc
	play "com.typesafe.play:play-cache_2.11:2.4.3"			// cache
	play "com.typesafe.play:play-java-ws_2.11:2.4.3"			// javaWs
	play "com.typesafe.play:play-jdbc-evolutions_2.11:2.4.3"	// evolutions

	// Geoportaal dependencies:
	play "org.webjars:dojo:1.10.4"
	play "org.webjars:bootstrap:3.3.5"
	play "org.webjars:jquery:2.1.4"
	play "org.postgresql:postgresql:9.4-1202-jdbc42"
	
	play "com.querydsl:querydsl-sql-codegen:4.0.6"
	
	// Database drivers used for QueryDSL metadata generation:
	databaseDriver "com.h2database:h2:1.4.190"
	
	// APT processor for QueryDSL:
	queryDSLApt "com.querydsl:querydsl-apt:4.0.6"
}

model {
	components {
		play {
			platform play: '2.4.3', java: '1.8'
			
			// The injected routes generator is required to be compatible with
			// Play version 2.4 and up. 
			injectedRoutesGenerator = true
			
			sources {
				// Add the generated java sources as a source directory:
				java {
					source.srcDir "$buildDir/generated-src/java"
					
					// Indicate that these sources are generated by the QueryDSL metadata task:
					builtBy queryDSLGenerateMetadata
					builtBy queryDSLAnnotationProcessor
				}
				
				// Add the extracted webjars as a source directory:
				resources {
					source.srcDir "$buildDir/webjar-source"
				}
			}

			binaries.all { binary ->
				binary.classes.addResourceDir project.file("$buildDir/webjar-source")
				
				tasks.create ("copy${binary.name.capitalize()}WebjarPublicAssets", Copy) { task ->
					from 'public'
					into "$buildDir/webjar-source/META-INF/resources/webjars/$task.project.name/$task.project.version"
					
					binary.classes.builtBy task
				}
				
				tasks.create ("copy${binary.name.capitalize()}WebjarAssets", Copy) { task ->
					from 'app/assets'
					into "$buildDir/webjar-source/META-INF/resources/webjars/$task.project.name/$task.project.version"
					
					binary.classes.builtBy task
				}
				
				tasks.create ("copy${binary.name.capitalize()}WebjarCompiledAssets", Copy) { task ->
					from "$buildDir/${binary.name}/minify${binary.name.capitalize()}JavaScript"
					into "$buildDir/webjar-source/META-INF/resources/webjars/$task.project.name/$task.project.version"
					
					binary.classes.builtBy task
				}

				def lessDestinationDir = "${buildDir}/less/"					
				def extractLessTask = "extract${binary.name.capitalize()}WebjarsLess"
				def copyLessTask = "copy${binary.name.capitalize()}Less"
				
				binary.assets.addAssetDir project.file (lessDestinationDir)
				
				tasks.create (extractLessTask, Copy) { task ->
					from {
						configurations.play.collect { 
							zipTree(it).matching { include 'META-INF/resources/webjars/**' }
						}
					}
					into lessDestinationDir + "lib/"
					eachFile { details ->
						def shortPath = (details.path - "META-INF/resources/webjars/")
						def parts = shortPath.split '/'
						def result = new StringBuilder ()
						for (int i = 0; i < parts.length; ++ i) {
							if (i == 1) {
								continue;
							}
							if (result.length () > 0) {
								result.append "/"
							}
							result.append parts[i]
						}
						def targetPath = result.toString ()
						details.path = targetPath
					}
					
					binary.assets.builtBy task
				}
				
				tasks.create (copyLessTask, Copy) { task ->
					from "app/assets"
					into lessDestinationDir
					include "**/*.less"
				
					binary.assets.builtBy task
					dependsOn extractLessTask
				}
				
				tasks.create ("compile${binary.name.capitalize()}LessAssets", com.github.houbie.gradle.lesscss.LesscTask) { task ->
					sourceDir lessDestinationDir
					include "**/*.less"
					exclude "**/_*.less"
					exclude "lib/**"
					destinationDir = project.file("${buildDir}/${binary.name}/lessAssets")
					
					binary.assets.addAssetDir destinationDir
					binary.assets.builtBy task
					dependsOn copyLessTask
				}
			}			
		}
	}
}

// Support for Play projects is lacking with the eclipse plugin, update the eclipse configuration
// so that the correct classpath and source folders are used.
// The scala and java natures are added to the generated eclipse projects.
eclipse {
	classpath {
		plusConfigurations += [ configurations.play ]
		
		file {
			whenMerged { cp ->
				cp.entries.add (new org.gradle.plugins.ide.eclipse.model.SourceFolder('app', null))
				cp.entries.add (new org.gradle.plugins.ide.eclipse.model.SourceFolder('test', null))
				cp.entries.add (new org.gradle.plugins.ide.eclipse.model.SourceFolder("build/playBinary/src/compilePlayBinaryRoutes", null))
				cp.entries.add (new org.gradle.plugins.ide.eclipse.model.SourceFolder("build/playBinary/src/compilePlayBinaryTwirlTemplates", null))
				cp.entries.add (new org.gradle.plugins.ide.eclipse.model.SourceFolder("build/generated-src/java", null))
			}
		}
	}
	
	project {
		natures 'org.scala-ide.sdt.core.scalanature', 'org.eclipse.jdt.core.javanature'
	}
}

// QueryDSL build:
import groovy.sql.Sql
import com.querydsl.sql.codegen.MetaDataExporter

task queryDSLCreateDatabase {
	ext.srcDir = file ("conf/evolutions/default")
	ext.srcFiles = files { srcDir.listFiles () }
	ext.destFile = new File (new File (buildDir, "queryDSL"), "db")
	
	inputs.files srcFiles
	outputs.file new File (destFile.getAbsolutePath () + ".mv.db")
	
	doLast {
		// Load the database drivers:
		URLClassLoader loader = GroovyObject.class.classLoader
		configurations.databaseDriver.each { File file ->
			loader.addURL (file.toURL ())
		}
		
		// Create and populate the database:
		def sql = Sql.newInstance ("jdbc:h2:/${destFile};DB_CLOSE_DELAY=0;FILE_LOCK=NO;MODE=PostgreSQL", "", "", "org.h2.Driver")
		sql.execute "drop all objects"
		try {
			srcFiles.collect { relativePath(it) }.sort ().each { file ->
				// Extract the "Ups" section from the SQL:
				StringBuilder builder = new StringBuilder ()
				boolean inUps = false;
				
				new File (file).readLines().each { line ->
					if (line.startsWith ("# --- !Ups")) {
						inUps = true
					} else if (line.startsWith ("# --- !Downs")) {
						inUps = false
					} else if (inUps) {
						builder.append (line + "\n")
					}
				}
				
				sql.execute builder.toString ()
			}
		} finally {
			sql.close ()
		}
	}
}

task queryDSLGenerateMetadata {
	dependsOn queryDSLCreateDatabase
	
	ext.packageName = "models"
	ext.targetDir = new File (buildDir.absolutePath + File.separator + "generated-src" + File.separator + "java") 
	
	inputs.file new File (queryDSLCreateDatabase.destFile.getAbsolutePath () + ".mv.db")
	outputs.dir targetDir

	doLast {	
		// Load the database drivers:
		URLClassLoader loader = GroovyObject.class.classLoader
		configurations.databaseDriver.each { File file ->
			loader.addURL (file.toURL ())
		}
		
		// Create and populate the database:
		def sql = Sql.newInstance ("jdbc:h2:/${queryDSLCreateDatabase.destFile};DB_CLOSE_DELAY=0;FILE_LOCK=NO;MODE=PostgreSQL", "", "", "org.h2.Driver")
		try {
			MetaDataExporter exporter = new MetaDataExporter ()
			exporter.setPackageName packageName
			exporter.setTargetFolder targetDir
			exporter.export sql.getConnection ().getMetaData ()   
		} finally {
			sql.close ()
		}
	}
}

task queryDSLAnnotationProcessor(type: JavaCompile, group: 'build', description: 'Generates QueryDSL projections') {
	source = file "app"
	classpath = configurations.play + configurations.queryDSLApt
	options.compilerArgs = [
		"-proc:only",
		"-processor", "com.querydsl.apt.QuerydslAnnotationProcessor" 
	]
	destinationDir = file "$buildDir/generated-src/java"
}